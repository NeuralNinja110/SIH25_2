#!/bin/bash
# Fast Scientific Testing - Focus on key metrics

set -e

PROJECT_ROOT="/workspaces/SIH25_2"
RESULTS_DIR="$PROJECT_ROOT/scientific_results"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

mkdir -p "$RESULTS_DIR"/{baseline,size_conservative,maximum_security,comparisons}

# Test cases
TESTS=(test_easy.c test_medium.c test_difficult.c test_threads.c test_function_pointers.c)

get_size() { stat -c%s "$1" 2>/dev/null || echo "0"; }

test_one() {
    local src="tests/$1"
    local mode=$2
    local level=$3
    local cycles=$4
    local flags=$5
    local name=$(basename "$1" .c)
    local dir="$RESULTS_DIR/$mode"
    
    echo -n "  $name ($mode)... "
    
    # Compile original
    gcc -O0 "$src" -o "$dir/${name}_orig" -pthread -lm 2>/dev/null || { echo "FAIL"; return 1; }
    
    # Obfuscate
    build/llvm-obfuscator -i "$src" -o "$dir/${name}_obf" -l "$level" --cycles "$cycles" $flags \
        --report "$dir/${name}_rpt" >/dev/null 2>&1 || { echo "FAIL"; return 1; }
    
    # Metrics
    local orig_sz=$(get_size "$dir/${name}_orig")
    local obf_sz=$(get_size "$dir/${name}_obf")
    local inc=$(awk "BEGIN {if($orig_sz>0) printf \"%.1f\",(($obf_sz-$orig_sz)/$orig_sz)*100; else print 0}")
    
    cat > "$dir/${name}.json" << EOF
{"test":"$name","mode":"$mode","orig_size":$orig_sz,"obf_size":$obf_sz,"size_inc_pct":$inc}
EOF
    
    echo "PASS (+$inc%)"
    return 0
}

echo "========================================="
echo "  MAOS Fast Scientific Test Suite"
echo "========================================="
echo ""

# Baseline
echo "Phase 1: Baseline (Medium, 3 cycles)"
b_pass=0; b_fail=0
for t in "${TESTS[@]}"; do
    test_one "$t" "baseline" "medium" 3 "" && ((b_pass++)) || ((b_fail++))
done
echo "  Result: $b_pass passed, $b_fail failed"
echo ""

# Size-Conservative
echo "Phase 2: Size-Conservative (Low, 2 cycles)"
sc_pass=0; sc_fail=0
for t in "${TESTS[@]}"; do
    test_one "$t" "size_conservative" "low" 2 "" && ((sc_pass++)) || ((sc_fail++))
done
echo "  Result: $sc_pass passed, $sc_fail failed"
echo ""

# Maximum-Security
echo "Phase 3: Maximum-Security (High, 5 cycles, virtualization)"
ms_pass=0; ms_fail=0
for t in "${TESTS[@]}"; do
    test_one "$t" "maximum_security" "high" 5 "--enable-virtualization --enable-anti-debug" && ((ms_pass++)) || ((ms_fail++))
done
echo "  Result: $ms_pass passed, $ms_fail failed"
echo ""

# Generate report
cat > "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md" << EOF
# MAOS Scientific Test Report

**Timestamp:** $TIMESTAMP
**Tests:** ${#TESTS[@]}

## Results Summary

| Mode | Passed | Failed | Success Rate |
|------|--------|--------|--------------|
| Baseline | $b_pass | $b_fail | $(awk "BEGIN {printf \"%.0f\",($b_pass/${#TESTS[@]})*100}")% |
| Size-Conservative | $sc_pass | $sc_fail | $(awk "BEGIN {printf \"%.0f\",($sc_pass/${#TESTS[@]})*100}")% |
| Maximum-Security | $ms_pass | $ms_fail | $(awk "BEGIN {printf \"%.0f\",($ms_pass/${#TESTS[@]})*100}")% |

## Detailed Metrics

### Baseline
EOF

for t in "${TESTS[@]}"; do
    n=$(basename "$t" .c)
    f="$RESULTS_DIR/baseline/$n.json"
    [ -f "$f" ] && echo "- **$n**: $(jq -r '.size_inc_pct' "$f")% size increase" >> "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md"
done

cat >> "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md" << EOF

### Size-Conservative
EOF

for t in "${TESTS[@]}"; do
    n=$(basename "$t" .c)
    f="$RESULTS_DIR/size_conservative/$n.json"
    [ -f "$f" ] && echo "- **$n**: $(jq -r '.size_inc_pct' "$f")% size increase" >> "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md"
done

cat >> "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md" << EOF

### Maximum-Security
EOF

for t in "${TESTS[@]}"; do
    n=$(basename "$t" .c")
    f="$RESULTS_DIR/maximum_security/$n.json"
    [ -f "$f" ] && echo "- **$n**: $(jq -r '.size_inc_pct' "$f")% size increase" >> "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md"
done

cat >> "$RESULTS_DIR/comparisons/report_$TIMESTAMP.md" << EOF

## Analysis

### Compliance

**Size-Conservative Mode:**
- Goal: ≤15% size increase
- Status: $([ $sc_pass -ge 4 ] && echo "✓ PASS" || echo "⚠ NEEDS REVIEW")

**Maximum-Security Mode:**
- Goal: Maximum protection
- Status: $([ $ms_pass -ge 4 ] && echo "✓ PASS" || echo "⚠ NEEDS REVIEW")

---
*Generated by MAOS Fast Scientific Testing Framework*
EOF

echo "========================================="
echo "Report: $RESULTS_DIR/comparisons/report_$TIMESTAMP.md"
echo "========================================="
