--- src/core/PCGE.cpp.orig
+++ src/core/PCGE.cpp
@@ -54,7 +54,7 @@
     for (int i = 0; i < variantCount; ++i) {
         // Clone the module for each variant
         auto clonedModule = llvm::CloneModule(originalModule);
         
         // Apply random morphing with varying intensity
-        int intensity = rng.getRandomInt(morphingIntensity_ / 2, morphingIntensity_ * 2);
+        int intensity = rng.getUInt32(morphingIntensity_ / 2, morphingIntensity_ * 2);
         
         CodeVariant variant;
         variant.variantId = "variant_" + std::to_string(i);
@@ -64,7 +64,7 @@
         
         // Apply multiple morph types
         for (auto morphType : enabledMorphTypes_) {
-            if (rng.getRandomInt(0, 100) < 70) { // 70% chance
+            if (rng.getUInt32(0, 100) < 70) { // 70% chance
                 applyMorphing(*variant.moduleIR, morphType);
                 variant.appliedTransformations.push_back(
                     "MorphType_" + std::to_string(static_cast<int>(morphType))
@@ -89,7 +89,7 @@
     // Apply transformations based on intensity
     for (int i = 0; i < morphingIntensity; ++i) {
         auto& rng = RandomGenerator::getInstance();
-        int morphIdx = rng.getRandomInt(0, enabledMorphTypes_.size() - 1);
+        int morphIdx = rng.getUInt32(0, enabledMorphTypes_.size() - 1);
         applyMorphing(*variant.moduleIR, enabledMorphTypes_[morphIdx]);
     }
     
